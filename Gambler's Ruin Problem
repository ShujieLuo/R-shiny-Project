# gambler problem 
CreateGamblerProcess = function(M,p){
  Mat = matrix(0,nrow = M+1,ncol = M+1) #Create initial transition matrix
  Mat[1,1] = 1
  Mat[M+1,M+1] = 1
  for (i in 2:M){
    Mat[i, i-1] = 1- p
    Mat[i, i+1] = p
  }
  return(new("markovchain",transitionMatrix = Mat, states = as.character(seq(0,M))))
}

GP = CreateGamblerProcess(3,0.3)


rGamblerPath = function(M,n,x0){
  # determines if a gambler reaches fortune M in n or fewer plays
  # x0 is the initial fortune 
  x = character(n+1)
  x[1]=x0
  for (i in 2:(n+1)){
    x[i] = sample(as.character(0:M), size= 1, prob = GP[x[i-1],])
    if (x[i]==as.character(M)){
      return(1)
    }
    if (x[i]=="0"){
      return(0)
    }
  }
}

rGamblerPath(3,5,1)

Y = replicate(1000,rGamblerPath(3,5,1))

# probability of reaching a fortune of $3 in 5 or fewer plays
sum(Y)/1000


ui = fluidPage(
  sliderInput("M","Enter M", min = 3, max = 20, value = 3, step =1 ),
  sliderInput("p","Enter p", min = 0.1, max = 0.9,value=0.3, step = 0.1),
  sliderInput("x0","Enter initial fortune", min =1,value=3, max = 19),
  sliderInput("n","Enter number of plays", min = 2,value=4, max = 25),
  textOutput("PF")
)

server = function(input, output){
  Y = reactive({
    GP = CreateGamblerProcess(input$M,input$p)
    replicate(1000,rGamblerPath(input$M,input$n,input$x0))
  })
  output$PF=renderText({paste("Probability is ", sum(Y())/1000)})
}

shinyApp(ui,server)
